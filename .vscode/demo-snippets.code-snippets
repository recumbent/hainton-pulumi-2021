{
	// Place your hainton-pulumi-2021 workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
    
    "StorageAccount": {
        "prefix": "pd04",
        "body": [
            "var storageAccount = new StorageAccount(\"sa\", new StorageAccountArgs()",
            "{",
            "    ResourceGroupName = resourceGroup.Name,",
            "    Sku = new SkuArgs",
            "    {",
            "        Name = SkuName.Standard_LRS,",
            "    },",
            "    Kind = Pulumi.AzureNative.Storage.Kind.StorageV2",
            "});",
            ""
        ]
    },
    "AppServicePlan" : {
        "prefix": "pd03",
        "body": [
            "var appServicePlan = new AppServicePlan(\"FuntionAppServicePlan\", new AppServicePlanArgs()",
            "{",
            "    ResourceGroupName = resourceGroup.Name,",
            "    Kind = \"FunctionApp\",",
            "    // Consumption plan SKU",
            "    Sku = new SkuDescriptionArgs",
            "    {",
            "        Tier = \"Dynamic\",",
            "        Name = \"Y1\"",
            "    }",
            "});",
            ""
        ]
    },           
    "CodeContainer": {
        "prefix": "pd05",
        "body": [
            "var codeContainer = new BlobContainer(\"code-container\", new BlobContainerArgs()",
            "{",
            "    ResourceGroupName = resourceGroup.Name,",
            "    AccountName = storageAccount.Name,",
            "    PublicAccess = PublicAccess.None,",
            "    ContainerName = \"code\"",
            "});",
            ""
        ]            
    },
    "DataContainer": {
        "prefix": "pd08",
        "body": [
            "var dataContainer = new BlobContainer(\"data\", new BlobContainerArgs()",
            "{",
            "    ResourceGroupName = resourceGroup.Name,",
            "    AccountName = storageAccount.Name,",
            "    PublicAccess = PublicAccess.None,",
            "    ContainerName = \"data\"",
            "});",
            ""
        ]
    },        
    "CodeBlob": {
        "prefix": "pd06",
        "body": [
            "var codeBlob = new Blob(\"functionCode\", new BlobArgs()",
            "{",
            "    AccountName = storageAccount.Name,",
            "    ContainerName = codeContainer.Name,",
            "    ResourceGroupName = resourceGroup.Name,",
            "    Type = BlobType.Block,",
            "    Source = new FileArchive(\"../azure-func/publish\")",
            "});",
            "",
            "var codeBlobUrl = SignedBlobReadUrl(codeBlob, codeContainer, storageAccount, resourceGroup);",
            ""
        ]
    },
    "ApplicationInsights": {
        "prefix": "pd07",
        "body": [
            "var appInsights = new Component(\"appInsights\", new ComponentArgs()",
            "{",
            "    ApplicationType = ApplicationType.Web,",
            "    Kind = \"web\",",
            "    ResourceGroupName = resourceGroup.Name,",
            "});",
            ""
        ]
    },
    "FunctionApp": {
        "prefix": "pd01",
        "body": [
            "var app = new WebApp(\"FunctionApp\", new WebAppArgs()",
            "{",
            "    Kind = \"FunctionApp\",",
            "    ResourceGroupName = resourceGroup.Name,",
            "    ServerFarmId = appServicePlan.Id,",
            "    SiteConfig = new SiteConfigArgs()",
            "    {",
            "        AppSettings = new[]",
            "        {",
            "            // Azure settings",
            "            new NameValuePairArgs() ",
            "            {",
            "                Name = \"AzureWebJobsStorage\",",
            "                Value =  GetConnectionString(resourceGroup.Name, storageAccount.Name)",
            "            },",
            "            new NameValuePairArgs()",
            "            {",
            "                Name = \"runtime\",",
            "                Value = \"dotnet\"",
            "            },",
            "            new NameValuePairArgs() ",
            "            {",
            "                Name = \"FUNCTIONS_EXTENSION_VERSION\",",
            "                Value = \"~3\"",
            "            },",
            "            new NameValuePairArgs() ",
            "            { ",
            "                Name = \"WEBSITE_RUN_FROM_PACKAGE\", ",
            "                Value = codeBlobUrl ",
            "            },",
            "            new NameValuePairArgs()",
            "            {",
            "                Name = \"APPLICATIONINSIGHTS_CONNECTION_STRING\",",
            "                Value = Output.Format($\"InstrumentationKey={appInsights.InstrumentationKey}\"),",
            "            },",
            "            // pd02",
            "        }",
            "    }",
            "});",
            ""
        ]
    },
    "FunctionParameters": {
        "prefix": "pd02",
        "body": [
            "// App settings",
            "new NameValuePairArgs()",
            "{ ",
            "    Name = \"QuoteServerHost\",",
            "    Value = \"https://0rogaeco5b.execute-api.eu-west-2.amazonaws.com/Prod\" },",
            "new NameValuePairArgs()",
            "{ ",
            "    Name = \"DataConnectionString\",",
            "    Value = GetConnectionString(resourceGroup.Name, storageAccount.Name) ",
            "},",
            "new NameValuePairArgs()",
            "{ ",
            "    Name = \"DataContainer\",",
            "    Value = dataContainer.Name",
            "}",
        ]
    },
    "StackSwitch": {
        "prefix": "aws01",
        "body": [
            "static Task<int> Main()",
            "{",
            "    var stack = Environment.GetEnvironmentVariable(\"PULUMI_STACK\");",
            "    Console.WriteLine($\"*** Deploying stack: {stack}\");",
            "",
            "    return stack switch",
            "    {",
            "        string s when s.StartsWith(\"azure\") => Deployment.RunAsync<FunctionStack>(),",
            "        string s when s.StartsWith(\"aws\") => Deployment.RunAsync<LambdaStack>(),",
            "        _ => throw new ArgumentOutOfRangeException(\"stack\", \"Known stacks start 'azure' or 'aws'.\")",
            "    };",
            "}",
            ""
        ]
    }
}